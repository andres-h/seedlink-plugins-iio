#!/usr/bin/env python3

import sys
import time
import datetime
import argparse
from utils import Seedlink, IIODevice


VERSION = "2023.066"


def main():
    parser = argparse.ArgumentParser()

    parser.set_defaults(
        device = "dps310",
        sample_rate = 1
    )

    parser.add_argument("--version",
        action = "version",
        version = "%(prog)s " + VERSION
    )

    parser.add_argument("-d", "--device",
        help = "IIO device name (default %(default)s)"
    )

    parser.add_argument("-r", "--sample-rate",
        type = int,
        help = "sample rate (default %(default)s)"
    )

    parser.add_argument("-s", "--station",
        help = "station ID"
    )

    parser.add_argument("plugin_id",
        help = "plugin ID"
    )

    args = parser.parse_args()

    sl = Seedlink()
    dev = IIODevice(args.device)

    settings = (
        ("in_pressure_sampling_frequency", 2 * args.sample_rate),
        ("in_pressure_oversampling_ratio", 64),
        ("in_temp_sampling_frequency", 2 * args.sample_rate),
        ("in_temp_oversampling_ratio", 64)
    )

    for i in range(10):
        for attr, value in settings:
            dev.set(attr, value)

        # discard possibly invalid samples
        for j in range(2):
            dev.get("in_pressure_input")
            dev.get("in_temp_input")

        success = True
        for attr, value in settings:
            dev_value = int(dev.get(attr))
            if dev_value != value:
                print("%s: %s: %d != %d" % (args.plugin_id, attr, dev_value, value),
                      file=sys.stderr)
                success = False

        if success:
            break

    else:
        print("giving up", file=sys.stderr)
        sys.exit(1)

    period = 1.0 / args.sample_rate
    t = datetime.datetime.utcnow()

    while True:
        pressure = int(float(dev.get("in_pressure_input")) * 1000.0)
        temp = int(dev.get("in_temp_input"))

        sl.send_raw3(args.station, "D", t, 0, -1, (pressure,))
        sl.send_raw3(args.station, "K", t, 0, -1, (temp,))

        t_now = datetime.datetime.utcnow()
        t_diff = (t_now - t).total_seconds()

        if t_diff < 0 or t_diff > period:
            t = t_now
            continue

        else:
            time.sleep(period - t_diff)
            t += datetime.timedelta(seconds=period)


if __name__ == "__main__":
    main()

